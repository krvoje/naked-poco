defaultValue(member) ::= <<
<if(member.type.boolean)>false<\\>
<elseif(member.type.null)>null<\\>
<elseif(member.type.undefined)>undefined<\\>
<elseif(member.type.number)>0<\\>
<elseif(member.type.string)>""<\\>
<elseif(member.type.object)>{}<\\>
<elseif(member.type.array)>[]<\\>
<elseif(member.type.function)>function(){}<\\>
<elseif(member.type.enum)>""<\\>
<elseif(member.type.enumMember)>{}<\\>
<else>undefined<\\>
<endif>
>>

csv(members) ::= <<
<trunc(members): {member|
    "<member.fieldName>",
}>    "<last(jsObj.members).fieldName>"
>>

csvFields(members) ::= <<
<trunc(members): {member|
    self.<member.fieldName>,
}>    self.<last(jsObj.members).fieldName>
>>

Enum(jsObj)::= <<
var <jsObj.typeName> = [
<csv(jsObj.members)>
];
>>

Field(member) ::= "self.<member.fieldName>=<defaultValue(member)>;"

Function(jsObj) ::= <<
function <jsObj.typeName>() {
    self = this;

<jsObj.members: {member|
    <Field(member)>
}>
    self.update = function(dto) {
<jsObj.members: {member|
        self.<member.fieldName>=dto.<member.fieldName>;
}>    }

    self.dto = function() {
        return JSON.stringify({
        <csvFields(jsObj.members)>
        });
    }
}
>>

JavaScriptObject(jsObj) ::= <<
<if(jsObj.type.enum)>
    <Enum(jsObj)>
<else>
    <Function(jsObj)>
<endif>
>>